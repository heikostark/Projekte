{ ******************************** Calculate ********************************* }

_page ('Info ');
_eventbox;
_backcolor ($FFFF,$FFFF,$BFFF);
      _vbox;
            _label ('<b>Bold</b> - Single selection - LMB');
            _label ('<span foreground="#FF8000">Color</span> - Multiple selection - RMB');
            _separator;
            _label ('<b>Source</b>');
            _label ('All operations work on a single selected source.');
            _label;
            _label ('<b>Destination</b>  (=<i>Calculation</i>)');
            _label ('The calculation output is a single selected destination.');
            _label ('Same replaced! | Other appended!');
            _separator;
            _label ('<i>Note: Only multiple selection of destinations have a focus.</i>');
            if table_long then _label ('<i>Control + Click on screen (xy and zt) to take a screenshot.</i>')
            else if table_wide then _label ('<i>Control + Click on screen (xy and zt) to take a screenshot.</i>')
            else if table_special then _label ('<i>Control + Click on screen (xy, xz, xt) to take a screenshot.</i>')
            else _label ('<i>Control + Click on screen (xy, xz, yz) to take a screenshot.</i>');
      _endbox;
_endbox;
_endpage;

_page ('Points ');
_vbox;
_expand;
       _hbox;
            _label;
            _label ('Methods for neighbor:');
            calculate_crease_method_p := _combobox;
                                    _item ('All');
                                    _item ('Random 75%');
                                    _item ('Random 50%');
                                    _item ('Random 25%');
                                    _item ('Random 100.000');
                                    _item ('Random 10.000');
                                    _item ('Random 1.000');
                                    _item ('Random 100');
            _endcombobox;
            _label;
       _endbox;
       _hbox;
            command ('Decrease points','calculate.decrease.points','','','Decrease number of points',@proc_decrease_points);
            _label ('by');
            _hbox;
            _shrink;
                    calculate_crease_points := _smalledit ('50');
                    _label('%');
            _endbox;
            command ('Increase points','calculate.increase.points','','','Increase number of points',@proc_increase_points);
      _endbox;
      _separator;
      _hbox;
            command ('Search center point','calculate.center.point','','','Search center point',@proc_center_point);
            command ('Search 2nd cp','calculate.second.center.point','','','Search second center points',@proc_2_center_points);
            command ('Search 3rd cp','calculate.third.center.point','','','Search third center points',@proc_3_center_points);
      _endbox;
      _hbox;
            command ('Search max distance','calculate.max.distance.point','','','Search max point distance',@proc_max_distance_points);
            command ('Search max % distances','calculate.max.n.distance.point','','','Search max n points distances',@proc_max_n_distance_points);
            _hbox;
            _shrink;
                    calculate_distance_points := _smalledit ('1');
                    _label ('%');
            _endbox;
      _endbox;
      _separator;
      _hbox;
            _shrink;
            _tooltip (_label ('<b>Renumber:</b>'),'Renumber point axes values');
            _expand;
            command ('x-axis','calculate.renumber.x','','','Renumber points along x-axis (override x with 1 to n)',@proc_renumber_x);
            command ('y-axis','calculate.renumber.y','','','Renumber points along y-axis (override y with 1 to n)',@proc_renumber_y);
            command ('z-axis','calculate.renumber.z','','','Renumber points along z-axis (override z with 1 to n)',@proc_renumber_z);
            command ('t-axis','calculate.renumber.t','','','Renumber points along t-axis (override t with 1 to n)',@proc_renumber_t);
      _endbox;
      _hbox;
            _shrink;
            _tooltip (_label ('<b>Relative:</b>'),'Relative renumber point axes values');
            _expand;
            command ('x-axis','calculate.renumber.relative.point.x','','','Renumber points along x-axis (override x with (-n/2 to n/2)*Raster)',@proc_string_x_points);
            command ('y-axis','calculate.renumber.relative.point.y','','','Renumber points along y-axis (override y with (-n/2 to n/2)*Raster))',@proc_string_y_points);
            command ('z-axis','calculate.renumber.relative.point.z','','','Renumber points along z-axis (override z with (-n/2 to n/2)*Raster))',@proc_string_z_points);
            command ('t-axis','calculate.renumber.relative.point.t','','','Renumber points along t-axis (override t with (-n/2 to n/2)*Raster))',@proc_string_t_points);
            _tooltip (_label('Raster:'),'Grid/Raster');
            calculate_axis_raster_points := _smalledit ('0.1');
      _endbox;
      _separator;
      _hbox;
            command ('Sum between','calculate.sum.between','','','Sum between source and destination for every point.',@proc_sum_between);
            command ('Sum x','calculate.sum.between.x','','','Sum between source x and destination x for every point.',@proc_sum_between_x);
            command ('Sum y','calculate.sum.between.y','','','Sum between source y and destination y for every point.',@proc_sum_between_y);
            command ('Sum z','calculate.sum.between.z','','','Sum between source z and destination z for every point.',@proc_sum_between_z);
            command ('Sum t','calculate.sum.between.t','','','Sum between source t and destination t for every point.',@proc_sum_between_t);
      _endbox;
      _hbox;
            command ('Diff between','calculate.diff.between','','','Difference between source and destination for every point.',@proc_diff_between);
            command ('Diff x','calculate.diff.between.x','','','Difference between source x and destination x for every point.',@proc_diff_between_x);
            command ('Diff y','calculate.diff.between.y','','','Difference between source y and destination y for every point.',@proc_diff_between_y);
            command ('Diff z','calculate.diff.between.z','','','Difference between source z and destination z for every point.',@proc_diff_between_z);
            command ('Diff t','calculate.diff.between.t','','','Difference between source t and destination t for every point.',@proc_diff_between_t);
      _endbox;
_endbox;
_endpage;

_page ('P≻ ','Points...');
_vbox;
_expand;
      _hbox;
            _label ('Groups origin:'); group_origin := _smalledit ('0');
            _label ('Groups step:'); group_step := _smalledit ('1');
      _endbox;
      _hbox;
            command ('Group x','calculate.group.x','','','Group all points near to rastered x-values',@proc_group_x);
            command ('Group y','calculate.group.y','','','Group all points near to rastered y-values',@proc_group_y);
            command ('Group z','calculate.group.z','','','Group all points near to rastered z-values',@proc_group_z);
            command ('Group t','calculate.group.t','','','Group all points near to rastered t-values',@proc_group_t);
      _endbox;
      _hbox;
            _label ('Groups only from:'); group_from := _smalledit ('1');
            _label ('to:'); group_to := _smalledit ('100');
      _endbox;
      _hbox;
            command ('Group [x]','calculate.group.only.x','','','Group [from to] points near to rastered x-values',@proc_group_only_x);
            command ('Group [y]','calculate.group.only.y','','','Group [from to] points near to rastered y-values',@proc_group_only_y);
            command ('Group [z]','calculate.group.only.z','','','Group [from to] points near to rastered z-values',@proc_group_only_z);
            command ('Group [t]','calculate.group.only.t','','','Group [from to] points near to rastered t-values',@proc_group_only_t);
      _endbox;
      _separator;
      _hbox;
             command ('Addup','calculate.addup','','','Addup all points in object',@proc_addup);
             command ('Addup x','calculate.addup.x','','','Addup all points in object with the same x',@proc_addup_x);
             command ('Addup y','calculate.addup.y','','','Addup all points in object with the same y',@proc_addup_y);
             command ('Addup z','calculate.addup.z','','','Addup all points in object with the same z',@proc_addup_z);
             command ('Addup t','calculate.addup.t','','','Addup all points in object with the same t',@proc_addup_t);
      _endbox;
      _hbox;
             command ('Subtract','calculate.subtract','','','Subtract all points in object',@proc_subtract);
             command ('Subtract x','calculate.subtract.x','','','Subtract all points in object with the same x',@proc_subtract_x);
             command ('Subtract y','calculate.subtract.y','','','Subtract all points in object with the same y',@proc_subtract_y);
             command ('Subtract z','calculate.subtract.z','','','Subtract all points in object with the same z',@proc_subtract_z);
             command ('Subtract t','calculate.subtract.t','','','Subtract all points in object with the same t',@proc_subtract_t);
      _endbox;
      _separator;
      _label ('<i>Note: Ignore same axes values, if this choosen.</i>');
_endbox;
_endpage;

_page ('P≻≻ ','Points...');
_vbox;
_expand;
      _hbox;
             command ('Multiply','calculate.multiply','','','Multiply all points in object',@proc_multiply);
             command ('Multiply x','calculate.multiply.x','','','Multiply all points in object with the same x',@proc_multiply_x);
             command ('Multiply y','calculate.multiply.y','','','Multiply all points in object with the same y',@proc_multiply_y);
             command ('Multiply z','calculate.multiply.z','','','Multiply all points in object with the same z',@proc_multiply_z);
             command ('Multiply t','calculate.multiply.t','','','Multiply all points in object with the same t',@proc_multiply_t);
      _endbox;
      _hbox;
             command ('Divide','calculate.divide','','','Divide all points in object',@proc_divide);
             command ('Divide x','calculate.divide.x','','','Divide all points in object with the same x',@proc_divide_x);
             command ('Divide y','calculate.divide.y','','','Divide all points in object with the same y',@proc_divide_y);
             command ('Divide z','calculate.divide.z','','','Divide all points in object with the same z',@proc_divide_z);
             command ('Divide t','calculate.divide.t','','','Divide all points in object with the same t',@proc_divide_t);
      _endbox;
      _separator;
      _hbox;
             command ('Mean','calculate.mean','','','Mean from all points in object',@proc_mean);
             command ('Mean x','calculate.mean.x','','','Mean from all points in object with the same x',@proc_mean_x);
             command ('Mean y','calculate.mean.y','','','Mean from all points in object with the same y',@proc_mean_y);
             command ('Mean z','calculate.mean.z','','','Mean from all points in object with the same z',@proc_mean_z);
             command ('Mean t','calculate.mean.t','','','Mean from all points in object with the same t',@proc_mean_t);
      _endbox;
      _hbox;
             command ('SD','calculate.sd','','','SD from all points in object',@proc_sd);
             command ('SD x','calculate.sd.x','','','SD from all points in object with the same x',@proc_sd_x);
             command ('SD y','calculate.sd.y','','','SD from all points in object with the same y',@proc_sd_y);
             command ('SD z','calculate.sd.z','','','SD from all points in object with the same z',@proc_sd_z);
             command ('SD t','calculate.sd.t','','','SD from all points in object with the same t',@proc_sd_t);
      _endbox;
      _separator;
      _hbox;
             command ('RMS','calculate.rms','','','Root (mean (square)) from all points in object',@proc_rms);
             command ('RMS x','calculate.rms.x','','','Root (mean (square)) from all points in object with the same x',@proc_rms_x);
             command ('RMS y','calculate.rms.y','','','Root (mean (square)) from all points in object with the same y',@proc_rms_y);
             command ('RMS z','calculate.rms.z','','','Root (mean (square)) from all points in object with the same z',@proc_rms_z);
             command ('RMS t','calculate.rms.t','','','Root (mean (square)) from all points in object with the same t',@proc_rms_t);
      _endbox;
      _hbox;
             command ('SMR','calculate.smr','','','Square (mean (root)) from all points in object',@proc_smr);
             command ('SMR x','calculate.smr.x','','','Square (mean (root)) from all points in object with the same x',@proc_smr_x);
             command ('SMR y','calculate.smr.y','','','Square (mean (root)) from all points in object with the same y',@proc_smr_y);
             command ('SMR z','calculate.smr.z','','','Square (mean (root)) from all points in object with the same z',@proc_smr_z);
             command ('SMR t','calculate.smr.t','','','Square (mean (root)) from all points in object with the same t',@proc_smr_t);
      _endbox;
      _separator;
{      _hbox;
             command ('X²','calculate.x2','','','X² distribution from all points in object',@proc_x2);
             command ('X² x','calculate.x2.x','','','X² distribution from all points in object with the same x',@proc_x2_x);
             command ('X² y','calculate.x2.y','','','X² distribution from all points in object with the same y',@proc_x2_y);
             command ('X² z','calculate.x2.z','','','X² distribution from all points in object with the same z',@proc_x2_z);
             command ('X² t','calculate.x2.t','','','X² distribution from all points in object with the same t',@proc_x2_t);
      _endbox;
      _separator}
      _label ('<i>Note: Ignore same axes values, if this choosen.</i>');
_endbox;
_endpage;

_page ('P≻≻≻ ','Points...');
_vbox;
_expand;
      _hbox;
             command ('Min','calculate.min','','','Min from all points in object',@proc_min);
             command ('Min x','calculate.min.x','','','Min from all points in object with the same x',@proc_min_x);
             command ('Min y','calculate.min.y','','','Min from all points in object with the same y',@proc_min_y);
             command ('Min z','calculate.min.z','','','Min from all points in object with the same z',@proc_min_z);
             command ('Min t','calculate.min.t','','','Min from all points in object with the same t',@proc_min_t);
      _endbox;
      _hbox;
             command ('Q.25','calculate.q25','','','Q.25 from all points in object',@proc_q25);
             command ('Q.25 x','calculate.q25.x','','','Q.25 from all points in object with the same x',@proc_q25_x);
             command ('Q.25 y','calculate.q25.y','','','Q.25 from all points in object with the same y',@proc_q25_y);
             command ('Q.25 z','calculate.q25.z','','','Q.25 from all points in object with the same z',@proc_q25_z);
             command ('Q.25 t','calculate.q25.t','','','Q.25 from all points in object with the same t',@proc_q25_t);
      _endbox;
      _hbox;
             command ('Median','calculate.median','','','Median from all points in object',@proc_median);
             command ('Median x','calculate.median.x','','','Median mean square from all points in object with the same x',@proc_median_x);
             command ('Median y','calculate.median.y','','','Median mean square from all points in object with the same y',@proc_median_y);
             command ('Median z','calculate.median.z','','','Median mean square from all points in object with the same z',@proc_median_z);
             command ('Median t','calculate.median.t','','','Median mean square from all points in object with the same t',@proc_median_t);
      _endbox;
      _hbox;
             command ('Q.75','calculate.q75','','','Q.75 from all points in object',@proc_q75);
             command ('Q.75 x','calculate.q75.x','','','Q.75 from all points in object with the same x',@proc_q75_x);
             command ('Q.75 y','calculate.q75.y','','','Q.75 from all points in object with the same y',@proc_q75_y);
             command ('Q.75 z','calculate.q75.z','','','Q.75 from all points in object with the same z',@proc_q75_z);
             command ('Q.75 t','calculate.q75.t','','','Q.75 from all points in object with the same t',@proc_q75_t);
      _endbox;
      _hbox;
             command ('Max','calculate.max','','','Max from all points in object',@proc_max);
             command ('Max x','calculate.max.x','','','Max from all points in object with the same x',@proc_max_x);
             command ('Max y','calculate.max.y','','','Max from all points in object with the same y',@proc_max_y);
             command ('Max z','calculate.max.z','','','Max from all points in object with the same z',@proc_max_z);
             command ('Max t','calculate.max.t','','','Max from all points in object with the same t',@proc_max_t);
      _endbox;
      _separator;
      _hbox;
             command ('Center','calculate.center','','','(Min+Max)/2 from all points in object',@proc_center);
             command ('Center x','calculate.center.x','','','(Min+Max)/2 from all points in object with the same x',@proc_center_x);
             command ('Center y','calculate.center.y','','','(Min+Max)/2 from all points in object with the same y',@proc_center_y);
             command ('Center z','calculate.center.z','','','(Min+Max)/2 from all points in object with the same z',@proc_center_z);
             command ('Center t','calculate.center.t','','','(Min+Max)/2 from all points in object with the same t',@proc_center_t);
      _endbox;
      _separator;
      _label ('<i>Note: Ignore same axes values, if this choosen.</i>');
_endbox;
_endpage;

_page ('Vectors ');
_vbox;
_expand;
      _hbox;
            _label ('Test methods for neighbor calculation:');
            calculate_crease_method_v := _combobox;
                                    _item ('All');
                                    _item ('Random 75%');
                                    _item ('Random 50%');
                                    _item ('Random 25%');
                                    _item ('Random 100.000');
                                    _item ('Random 10.000');
                                    _item ('Random 1.000');
                                    _item ('Random 100');
            _endcombobox;
      _endbox;
       _hbox;
            command ('Decrease vectors','calculate.decrease.vectors','','','Decrease the number of vectors',@proc_decrease_vectors);
            _label ('by');
            _hbox;
            _shrink;
                    calculate_crease_vectors := _smalledit ('50');
                    _label('%');
            _endbox;
            command ('Increase vectors','calculate.increase.vectors','','','Increase the number of vectors',@proc_increase_vectors);
      _endbox;
      _separator;
      _hbox;
            _label;
            command ('Make points to vectors','calculate.points.to.vectors','','','Make all points to vectors',@proc_make_vectors);
            command ('Make lines to vectors','calculate.lines.to.vectors','','','Make all lines to vectors',@proc_make_vectors_lines);
            _label;
      _endbox;
      _separator;
      _hbox;
            _shrink;
            _tooltip (_label ('<b>Renumber origin:</b>'),'Relative renumber line axes values (only for origin), the other axis are set to 0');
            _expand;
            command ('x-axis','calculate.x.vectors','','','Renumber lines along x-axis (override x with (-n/2 to n/2)*Raster)',@proc_string_x_vectors);
            command ('y-axis','calculate.y.vectors','','','Renumber lines along y-axis (override y with (-n/2 to n/2)*Raster)',@proc_string_y_vectors);
            command ('z-axis','calculate.z.vectors','','','Renumber lines along z-axis (override z with (-n/2 to n/2)*Raster)',@proc_string_z_vectors);
            command ('t-axis','calculate.t.vectors','','','Renumber lines along t-axis (override t with (-n/2 to n/2)*Raster)',@proc_string_t_vectors);
            _tooltip (_label('Raster:'),'Grid/Raster');
            calculate_axis_raster_vectors := _smalledit ('0.1');
      _endbox;
      _hbox;
            _label ('See also L≻≻ for more renumber methods.');
      _endbox;
      _separator;
      _label ('<i>Note: Vectors are special lines (two points). See also lines.</i>');
_endbox;
_endpage;

_page ('Lines ');
_vbox;
_expand;
      _hbox;
            _label ('Test methods for neighbor calculation:');
            calculate_crease_method_l := _combobox;
                                    _item ('All');
                                    _item ('Random 75%');
                                    _item ('Random 50%');
                                    _item ('Random 25%');
                                    _item ('Random 100.000');
                                    _item ('Random 10.000');
                                    _item ('Random 1.000');
                                    _item ('Random 100');
            _endcombobox;
      _endbox;
      _hbox;
            command ('Decrease lines','calculate.decrease.lines','','','Decrease number of lines',@proc_decrease_lines);
            _label ('by');
            _hbox;
            _shrink;
                    calculate_crease_lines := _smalledit ('50');
                    _label('%');
            _endbox;
            command ('Increase lines','calculate.increase.lines','','','Increase number of lines',@proc_increase_lines);
      _endbox;
      _separator;
      _hbox;
             command ('Move≺','calculate.begin.lines.move','','','Move first point of lines',@proc_move_begin_lines);
             command ('Copy first point','calculate.begin.lines','','','Copy first point of lines',@proc_begin_lines);
             command ('Middle','calculate.middle.lines','','','Copy middle point of lines',@proc_middle_lines);
             command ('Copy last point','calculate.end.lines','','','Copy last point of lines',@proc_end_lines);
             command ('≻Move','calculate.end.lines.move','','','Move last point of lines',@proc_move_end_lines);
      _endbox;
      _hbox;
             command ('Move≺','calculate.begin.vector.lines.move','','','Move first segment of lines',@proc_move_begin_lines_vector);
             command ('Copy first segment','calculate.begin.vector.lines','','','Copy first segment of lines',@proc_begin_lines_vector);
             command ('Copy last segment','calculate.end.vector.lines','','','Copy last segment of lines',@proc_end_lines_vector);
             command ('≻Move','calculate.end.vector.lines.move','','','Move last segment of lines',@proc_move_end_lines_vector);
      _endbox;
      _separator;
      _hbox;
            _label;
            command ('Split lines (step width)','calculate.split.lines.by.step','','','Split lines separated by step width',@proc_make_lines);
            command ('Split lines (direction)','calculate.split.lines.by.direction','','','Split lines separated by direction',@proc_make_lines_by_direction);
            _label;
      _endbox;
      _separator;
      _hbox;
            command ('Split lines (value)','calculate.split.lines.by.value','','','Split lines separated by value',@proc_make_lines_by_value);
            _label('Value:');
            calculate_lines_by_value := _edit ('<0,0,0,0>');
      _endbox;
      _hbox;
            command ('Split lines (spacing)','calculate.split.lines.by.spacing','','','Split lines separated by spacing (distance between points)',@proc_make_lines_by_spacing);
            _label('Spacing:');
            calculate_lines_by_spacing := _smalledit ('20');

            command ('Split lines (angle)','calculate.split.lines.by.angle','','','Split lines separated by angle',@proc_make_lines_by_angle);
            _label('Angle:');
            calculate_lines_by_angle := _tooltip(_smalledit ('45'),'For degree or radian see Data≻File');
      _endbox;
      _hbox;
            command ('Split lines (curvature)','calculate.split.lines.by.curvature','','','Split lines separated by curvature',@proc_make_lines_by_curvature);
            _tooltip (_label('Curvature:'),'Based on the Frenet–Serret formula');
            calculate_lines_by_curvature := _tooltip(_smalledit ('1'),'For degree or radian see Data≻File');

            command ('Split lines (torsion)','calculate.split.lines.by.torsion','','','Split lines separated by torsion',@proc_make_lines_by_torsion);
            _tooltip (_label('Torsion:'),'Based on the Frenet–Serret formula');
            calculate_lines_by_torsion := _tooltip(_smalledit ('1'),'For degree or radian see Data≻File');
      _endbox;
_endbox;
_endpage;

_page ('L≻ ','Lines...');
_vbox;
_expand;
      _hbox;
            _shrink;
            _label ('<b>Group by angle:</b>');
            _expand;
            command ('xy plane','calculate.group.lines.by.angle.xy','','','Group lines by angle in xy plane',@proc_group_lines_by_angle_xy);
            command ('yz plane','calculate.group.lines.by.angle.yz','','','Group lines by angle in yz plane',@proc_group_lines_by_angle_yz);
            command ('xz plane','calculate.group.lines.by.angle.xz','','','Group lines by angle in xz plane',@proc_group_lines_by_angle_xz);
            _label('Angle:');
            calculate_group_lines_angle := _tooltip(_smalledit ('45'),'For degree or radian see Data≻File');
      _endbox;
      _hbox;
            command ('with mean vector','calculate.group.lines.by.angle.mean','','','Group lines by angle against mean vector',@proc_group_lines_by_angle_mean);
            command ('with vector','calculate.group.lines.by.angle','','','Group lines by angle against vector',@proc_group_lines_by_angle);
            _label('Vector:');
            calculate_group_lines_vector := _edit ('<1,0,0,0>');
      _endbox;
      _separator;
      _hbox;
            _label;
            _tooltip (_label ('Polynom:'),'Polynominal degree: constant (0), linear (1), quadratic (2), ...');
            calculate_polynom_method := _combobox;
                                    _item ('Degree  0');
                                    _item ('Degree  1');
                                    _item ('Degree  2');
                                    _item ('Degree  3');
                                    _item ('Degree  4');
                                    _item ('Degree  5');
                                    _item ('Degree  6');
                                    _item ('Degree  7');
                                    _item ('Degree  8');
                                    _item ('Degree  9');
                                    _item ('Degree 10');
                                    _item ('Degree 11');
                                    _item ('Degree 12');
                                    _item ('Degree 13');
                                    _item ('Degree 14');
                                    _item ('Degree 15');
                                    _item ('Degree 16');
                                    _item ('Degree 17');
                                    _item ('Degree 18');
                                    _item ('Degree 19');
            _endcombobox (19);
            _label;
      _endbox;
      _hbox;
            command ('Fit','calculate.fit.lines.angle','','','Fit lines (best polynom) with angle adjustment (max points = 999)',@proc_fit_lines_angle);
            command ('Smooth','calculate.smooth.lines.angle','','','Smooth lines with angle adjustment (max points = 999)',@proc_smooth_lines_angle);
            _label('Angle:');
            calculate_smooth_lines_radian := _tooltip(_smalledit ('5'),'For degree or radian see Data≻File');
      _endbox;
      _hbox;
            command ('Fit','calculate.fit.lines.points','','','Fit lines (best polynom) with points adjustment',@proc_fit_lines_points);
            command ('Smooth','calculate.smooth.lines.points','','','Smooth lines with points adjustment',@proc_smooth_lines_points);
            _label('Points:');
            calculate_smooth_lines_points := _smalledit ('20');
      _endbox;
      _hbox;
            command ('Fit','calculate.fit.lines.steps','','','Fit lines (best polynom) with steps adjustment',@proc_fit_lines_steps);
            command ('Smooth','calculate.smooth.lines.steps','','','Smooth lines with steps adjustment',@proc_smooth_lines_steps);
            _label('Steps:');
            calculate_smooth_lines_steps := _smalledit ('0.1');
      _endbox;
      _hbox;
            command ('Fit','calculate.fit.lines.steps.x','','','Fit lines (best polynom) with x steps adjustment',@proc_fit_lines_steps_x);
            command ('Smooth','calculate.smooth.lines.steps.x','','','Smooth lines with x steps adjustment',@proc_smooth_lines_steps_x);
            _label('X steps:');
            calculate_smooth_lines_steps_x := _smalledit ('1');
      _endbox;
      _separator;
      _hbox;
            command ('Interpolate','calculate.lines.interpolate','','','Lines spacing point linear interpolation',@proc_lines_interpolate);
      _endbox;
 _endbox;
 _endpage;

 _page ('L≻≻ ','Lines...');
 _vbox;
 _expand;
      _hbox;
            _shrink;
            _tooltip (_label ('<b>Renumber:</b>'),'Renumber line axes values');
            _expand;
            command ('x-axis','calculate.renumber.line.x','','','Renumber lines along x-axis (override x with 1 to n)',@proc_renumber_line_x);
            command ('y-axis','calculate.renumber.line.y','','','Renumber lines along y-axis (override y with 1 to n)',@proc_renumber_line_y);
            command ('z-axis','calculate.renumber.line.z','','','Renumber lines along z-axis (override z with 1 to n)',@proc_renumber_line_z);
            command ('t-axis','calculate.renumber.line.t','','','Renumber lines along t-axis (override t with 1 to n)',@proc_renumber_line_t);
      _endbox;
      _hbox;
            _shrink;
            _tooltip (_label ('<b>Relative:</b>'),'Relative renumber line axes values');
            _expand;
            command ('x-axis','calculate.renumber.relative.line.x','','','Renumber lines along x-axis (override x with (-n/2 to n/2)*Raster)',@proc_string_x_lines);
            command ('y-axis','calculate.renumber.relative.line.y','','','Renumber lines along y-axis (override y with (-n/2 to n/2)*Raster))',@proc_string_y_lines);
            command ('z-axis','calculate.renumber.relative.line.z','','','Renumber lines along z-axis (override z with (-n/2 to n/2)*Raster))',@proc_string_z_lines);
            command ('t-axis','calculate.renumber.relative.line.t','','','Renumber lines along t-axis (override t with (-n/2 to n/2)*Raster))',@proc_string_t_lines);
            _tooltip (_label('Raster:'),'Grid/Raster');
            calculate_axis_raster_lines := _smalledit ('0.1');
      _endbox;
      _separator;
      _hbox;
           command ('Lineedge angle','calculate.lineedge.angle','','','Calculate lineedge angles along line'+#10+'<i>Note: The angles will be stored in t!</i>',@proc_calculate_lineedge_angle);
           command ('Inverse lineedge angle','calculate.lineedge.invangle','','','Calculate inverse lineedge angles along line'+#10+'<i>Note: The angles will be stored in t!</i>',@proc_calculate_lineedge_invangle);
           command ('Lineedge length','calculate.lineedge.length','','','Calculate from first point the cumulative lineedge length along line'+#10+'<i>Note: The length will be stored in t!</i>',@proc_calculate_lineedge_length);
      _endbox;
      _separator;
      _hbox;
            _shrink;
           _tooltip (_label ('<b>Polygone area:</b>'),'Calculate polygone area along axes'+#10+'<i>Note: The area will be shown as vector along axes!</i>');
           _expand;
           command ('Along x','calculate.polygone.area.x','','','Calculate polygone area along x-axis',@proc_calculate_areax);
           command ('Along y','calculate.polygone.area.y','','','Calculate polygone area along y-axis',@proc_calculate_areay);
           command ('Along z','calculate.polygone.area.z','','','Calculate polygone area along z-axis',@proc_calculate_areaz);
      _endbox;
      _separator;
      _hbox;
           _shrink;
           _tooltip (_label ('<b>Polyeder volume:</b>'),'Calculate polyeder volume along axes'+#10+'<i>Note: The volume will be shown in t-axis!</i>');
           _expand;
           command ('Along x','calculate.polyeder.volume.x','','','Calculate polyeder volume along x-axis',@proc_calculate_volumex);
           command ('Along y','calculate.polyeder.volume.y','','','Calculate polyeder volume along y-axis',@proc_calculate_volumey);
           command ('Along z','calculate.polyeder.volume.z','','','Calculate polyeder volume along z-axis',@proc_calculate_volumez);
      _endbox;
_endbox;
_endpage;

_page ('Objects ');
_vbox;
_expand;
      _hbox;
            _shrink;
            _label ('<b>Extract:</b>');
            _expand;
            command ('First points','calculate.extract.first.points','','','Extract first points in objects',@proc_move_first_object_points);
            command ('Last points','calculate.extract.last.points','','','Extract last points in objects',@proc_move_last_object_points);
            command ('First lines','calculate.extract.first.lines','','','Extract first lines (vectors) in objects',@proc_move_first_object_lines);
            command ('Last lines','calculate.extract.last.lines','','','Extract last lines (vectors) in objects',@proc_move_last_object_lines);
      _endbox;
      _separator;
      _hbox;
            _label ('Groups width:'); group_nearest := _smalledit ('0');
      _endbox;
      _hbox;
            command ('Group nearest','calculate.group.nearest','','','Group all points that nearest together',@proc_group_nearest);
            command ('only x,y,z','calculate.group.nearest.t','','','Group all points (only x,y,z) that nearest together',@proc_group_nearest_t);
            command ('only x,y','calculate.group.nearest.z','','','Group all points (only x,y) that nearest together',@proc_group_nearest_z);
            command ('only x','calculate.group.nearest.y','','','Group all points (only x) that nearest together',@proc_group_nearest_y);
      _endbox;
      _hbox;
            command ('Hardgroup nearest','calculate.hardgroup.nearest','','','Group all points that nearest together - ignore mistakes',@proc_hardgroup_nearest);
            command ('only x,y,z','calculate.hardgroup.nearest.t','','','Group all points (only x,y,z) that nearest together - ignore mistakes',@proc_hardgroup_nearest_t);
            command ('only x,y','calculate.hardgroup.nearest.z','','','Group all points (only x,y) that nearest together - ignore mistakes',@proc_hardgroup_nearest_z);
            command ('only x','calculate.hardgroup.nearest.y','','','Group all points (only x) that nearest together - ignore mistakes',@proc_hardgroup_nearest_y);
      _endbox;
      _separator;
      _hbox;
            hidecommand ('Group near to last object','','','','Group all points near to last object',@proc_none);
      _endbox;
      _separator;
      _hbox;
            _shrink;
            _tooltip (_label ('<b>Renumber:</b>'),'Renumber object axes values');
            _expand;
            command ('x-axis','calculate.renumber.object.x','','','Renumber objects along x-axis (override x with 1 to n)',@proc_renumber_object_x);
            command ('y-axis','calculate.renumber.object.y','','','Renumber objects along y-axis (override y with 1 to n)',@proc_renumber_object_y);
            command ('z-axis','calculate.renumber.object.z','','','Renumber objects along z-axis (override z with 1 to n)',@proc_renumber_object_z);
            command ('t-axis','calculate.renumber.object.t','','','Renumber objects along t-axis (override t with 1 to n)',@proc_renumber_object_t);
      _endbox;
      _hbox;
            _shrink;
            _tooltip (_label ('<b>Relative:</b>'),'Relative renumber object axes values');
            _expand;
            command ('x-axis','calculate.renumber.relative.object.x','','','Renumber objects along x-axis (override x with (-n/2 to n/2)*Raster)',@proc_string_x_objects);
            command ('y-axis','calculate.renumber.relative.object.y','','','Renumber objects along y-axis (override y with (-n/2 to n/2)*Raster))',@proc_string_y_objects);
            command ('z-axis','calculate.renumber.relative.object.z','','','Renumber objects along z-axis (override z with (-n/2 to n/2)*Raster))',@proc_string_z_objects);
            command ('t-axis','calculate.renumber.relative.object.t','','','Renumber objects along t-axis (override t with (-n/2 to n/2)*Raster))',@proc_string_t_objects);
            _tooltip (_label('Raster:'),'Grid/Raster');
            calculate_axis_raster_objects := _smalledit ('0.1');
      _endbox;
_endbox;
_endpage;
