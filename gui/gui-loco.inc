{ ************************* Locomotion *************************************** }

_page ('Properties ');
_vbox;
_expand;
      _hbox;
            _vbox;
                  _shrink;
                  _label ('<b>Orientation:</b>');
                  _label ('   ');
                  _label ('<b>Moment of inertia:</b>');
                  _expand;
            _endbox;
            _vbox;
                  command ('points','calculate.orientation.points','','','Calculate orientation (v*vᵀ) from points.'+#10+'<i>Note: Results stored in trans.matrix.</i>',@proc_orientation_points);
                  command ('points','calculate.inertia.points','','','Calculate moment of inertia from points (t=mass).'+#10+'<i>Note: Results stored in trans.matrix.</i>',@proc_inertia_points);
            _endbox;
            _vbox;
                  command ('vectors','calculate.orientation.vectors','','','Calculate orientation (v*vᵀ) from vectors.'+#10+'<i>Note: Results stored in trans.matrix.</i>',@proc_orientation_vectors);
                  command ('vectors','calculate.inertia.vectors','','','Calculate moment of inertia from vectors (t=mass).'+#10+'<i>Note: Results stored in trans.matrix.</i>',@proc_inertia_vectors);
            _endbox;
            _label ('–≻');
            _label ('Trans.Matrix');
      _endbox;
_endbox;
_endpage;

_page ('Trigonometry ');
_vbox;
_expand;
      _hbox;
           _label;
           _tooltip (command ('rad to deg','transform.rad.to.deg','','','Transform rotation angles from radian to degree',@proc_transform_rad_to_deg),'See also data≻file≻deg');
           _tooltip (command ('deg to rad','transform.deg.to.rad','','','Transform rotation angles from degree to radian',@proc_transform_deg_to_rad),'See also data≻file≻deg');
           _label;
     _endbox;
      _separator;
      _hbox;
            _label (' ');
            _label ('Tait-Bryan (Cardan) angles to Quaternions:');
            _label (' ');
     _endbox;
     _hbox;
            command ('X – Y'' – Z''''','transform.xyz.to.quat','','','Transform Tait-Bryan (Cardan) angles into quaternions',@proc_transform_xyz_quaternion);
            command ('X – Z'' – Y''''','transform.xzy.to.quat','','','Transform Tait-Bryan (Cardan) angles into quaternions',@proc_transform_xzy_quaternion);
            command ('Y – X'' – Z''''','transform.yxz.to.quat','','','Transform Tait-Bryan (Cardan) angles into quaternions',@proc_transform_yxz_quaternion);
            command ('Y – Z'' – X''''','transform.yzx.to.quat','','','Transform Tait-Bryan (Cardan) angles into quaternions',@proc_transform_yzx_quaternion);
            command ('Z – X'' – Y''''','transform.zxy.to.quat','','','Transform Tait-Bryan (Cardan) angles into quaternions',@proc_transform_zxy_quaternion);
            command ('Z – Y'' – X''''','transform.zyx.to.quat','','','Transform Tait-Bryan (Cardan) angles into quaternions',@proc_transform_zyx_quaternion);
     _endbox;
     _hbox;
            _label (' ');
            _label ('Euler angles to Quaternions:');
            _label (' ');
     _endbox;
     _hbox;
            command ('X – Y'' – X''''','transform.xyx.to.quat','','','Transform Euler angles into quaternions',@proc_transform_xyx_quaternion);
            command ('X – Z'' – X''''','transform.xzx.to.quat','','','Transform Euler angles into quaternions',@proc_transform_xzx_quaternion);
            command ('Y – X'' – Y''''','transform.yxy.to.quat','','','Transform Euler angles into quaternions',@proc_transform_yxy_quaternion);
            command ('Y – Z'' – Y''''','transform.yzy.to.quat','','','Transform Euler angles into quaternions',@proc_transform_yzy_quaternion);
            command ('Z – X'' – Z''''','transform.zxz.to.quat','','','Transform Euler angles into quaternions',@proc_transform_zxz_quaternion);
            command ('Z – Y'' – Z''''','transform.zyz.to.quat','','','Transform Euler angles into quaternions',@proc_transform_zyz_quaternion);
     _endbox;
     _separator;
     _hbox;
           _label;
           command ('Inverse rotations','transform.quat.conjugate','','','Conjugate quaternions (inverse rotations)',@proc_transform_quaternion_conjugate);
           command ('Norm','transform.quat.norm','','','Norm quaternions',@proc_transform_quaternion_norm);
           _label;
     _endbox;
     _separator;
     _hbox;
           _label;
           command ('Combining Rotations','transform.quat.mul','','','Multiplying quaternions between objects (combining rotations)',@proc_transform_quaternion_mul);
           _label;
     _endbox;
     _separator;
     _hbox;
            _label (' ');
            _label ('Quaternions to Tait-Bryan (Cardan) angles:');
            _label (' ');
      _endbox;
     _hbox;
               command ('X – Y'' – Z''''','transform.quat.to.xyz','','','Transform quaternions into Tait-Bryan (Cardan) angles',@proc_transform_quaternion_xyz);
           hidecommand ('X – Z'' – Y''''','transform.quat.to.xzy','','','Transform quaternions into Tait-Bryan (Cardan) angles',@proc_transform_xzy_quaternion);
           hidecommand ('Y – X'' – Z''''','transform.quat.to.yxz','','','Transform quaternions into Tait-Bryan (Cardan) angles',@proc_transform_yxz_quaternion);
           hidecommand ('Y – Z'' – X''''','transform.quat.to.yzx','','','Transform quaternions into Tait-Bryan (Cardan) angles',@proc_transform_yzx_quaternion);
               command ('Z – X'' – Y''''','transform.quat.to.zxy','','','Transform quaternions into Tait-Bryan (Cardan) angles',@proc_transform_quaternion_zxy);
           hidecommand ('Z – Y'' – X''''','transform.quat.to.zyx','','','Transform quaternions into Tait-Bryan (Cardan) angles',@proc_transform_quaternion_zyx);
     _endbox;
     _separator;
     _hbox;
           _label;
           _label ('Quaternions to vector * angle:');
           command ('Vector','transform.quat.to.vector','','','Transform quaternions into a vector with magnitude angle',@proc_transform_quaternion_vector);
           _label;
     _endbox;
_endbox;
_endpage;

_page ('Decomposition ');
_vbox;
_expand;
      _hbox;
            _vbox;
                  command ('DFT x','calculate.dft.x','','','Calculate DFT from line x values.'+#10+'<i>Note: Results stored als real (x) and imaginary part (y).</i>',@proc_dft_x);
                  command ('DFT y','calculate.dft.y','','','Calculate DFT from line y values.'+#10+'<i>Note: Results stored als real (x) and imaginary part (y).</i>',@proc_dft_y);
                  command ('DFT z','calculate.dft.z','','','Calculate DFT from line z values.'+#10+'<i>Note: Results stored als real (x) and imaginary part (y).</i>',@proc_dft_z);
                  command ('DFT t','calculate.dft.t','','','Calculate DFT from line t values.'+#10+'<i>Note: Results stored als real (x) and imaginary part (y).</i>',@proc_dft_t);
            _endbox;
      _endbox;
_endbox;
_endpage;

_page ('Torque ');
_vbox;
_expand;
      _framebox ('Points');
      _vbox;
            _hbox;
                  command ('T. arm x','calculate.torque.arm.x','','','Calculate torque arm (distance) against x-axis',@proc_torque_arm_x);
                  command ('T. arm y','calculate.torque.arm.y','','','Calculate torque arm (distance) against y-axis',@proc_torque_arm_y);
                  command ('T. arm z','calculate.torque.arm.z','','','Calculate torque arm (distance) against z-axis',@proc_torque_arm_z);
                  command ('T. arm yz','calculate.torque.arm.yz','','','Calculate torque arm (distance) against yz-plane',@proc_torque_arm_yz);
                  command ('T. arm xz','calculate.torque.arm.xz','','','Calculate torque arm (distance) against xz-plane',@proc_torque_arm_xz);
                  command ('T. arm xy','calculate.torque.arm.xy','','','Calculate torque arm (distance) against xy-plane',@proc_torque_arm_xy);
            _endbox;
            _separator;
            _hbox;
                  _label;
                  _tooltip (_label ('Force:'),'Force along axes or planes'); torque_force := _smalledit ('1');
                  _label;
            _endbox;
            _hbox;
                  command ('T. x','calculate.torque.x','','','Calculate torque (force*distance) against x-axis',@proc_torque_x);
                  command ('T. y','calculate.torque.y','','','Calculate torque (force*distance) against y-axis',@proc_torque_y);
                  command ('T. z','calculate.torque.z','','','Calculate torque (force*distance) against z-axis',@proc_torque_z);
                  command ('T. yz','calculate.torque.yz','','','Calculate torque (force*distance) against yz-plane',@proc_torque_yz);
                  command ('T. xz','calculate.torque.xz','','','Calculate torque (force*distance) against xz-plane',@proc_torque_xz);
                  command ('T. xy','calculate.torque.xy','','','Calculate torque (force*distance) against xy-plane',@proc_torque_xy);
            _endbox;
      _endbox;
      _endbox;
      _framebox ('Vectors');
      _vbox;
            _hbox;
                  command ('T. x','calculate.torque.vector.x','','','Calculate torque (|vector|*distance) against x-axis',@proc_torque_vector_x);
                  command ('T. y','calculate.torque.vector.y','','','Calculate torque (|vector|*distance) against y-axis',@proc_torque_vector_y);
                  command ('T. z','calculate.torque.vector.z','','','Calculate torque (|vector|*distance) against z-axis',@proc_torque_vector_z);
                  command ('T. yz','calculate.torque.vector.yz','','','Calculate torque (|vector|*distance) against yz-plane',@proc_torque_vector_yz);
                  command ('T. xz','calculate.torque.vector.xz','','','Calculate torque (|vector|*distance) against xz-plane',@proc_torque_vector_xz);
                  command ('T. xy','calculate.torque.vector.xy','','','Calculate torque (|vector|*distance) against xy-plane',@proc_torque_vector_xy);
            _endbox;
      _endbox;
      _endbox;
      _framebox ('Curves');
      _vbox;
            _hbox;
                  command ('Torque','calculate.torque.curves','','','Calculate torque against curves.'+#10+'<i>Note: The destination is overwritten.</i>',@proc_torque_curves);
                  _tooltip (_label ('Around:'),'Values around curves'); mean_radius := _smalledit ('1');
                  command ('T min','calculate.min.curves','','','Search min t values against curves.'+#10+'<i>Note: The destination is overwritten.</i>',@proc_min_curves);
                  command ('T add','calculate.add.curves','','','Calculate sum t values against curves.'+#10+'<i>Note: The destination is overwritten.</i>',@proc_add_curves);
                  command ('T mean','calculate.mean.curves','','','Calculate mean t values against curves.'+#10+'<i>Note: The destination is overwritten.</i>',@proc_mean_curves);
                  command ('T max','calculate.max.curves','','','Search max t values against curves.'+#10+'<i>Note: The destination is overwritten.</i>',@proc_max_curves);
            _endbox;
      _endbox;
      _endbox;
_endbox;
_endpage;
